# Immune Stats : An R package for the analysis of tissue and day specific virus escape and wild type epitope data.
# Author : Sukhdeep Singh
# Department : Division of Immunology, Department of Medicine
# Organization : Imperial College London
# Email : sukhdeepsingh.bio@gmail.com
####################################################################################################################
####################################################################################################################

# reads raw data files in
readFile<-function(filename,sep=NULL,header=TRUE){
filename=gsub('\'','',filename)
file=read.delim(filename,sep="\t",header=header)
num=print(paste("Total sequences detected:",length(file[,1])))
print("Its advisable to run abide function by inputting the sequence,tissue and experiment day column number, so that the data in in compliance with this package.")
print(colnames(file))
return(file)
}

###############################################################################
# function which makes the data compliant with the package
abide<-function(a,aSeq=NULL,aDay=NULL,aTissue=NULL){
colnames(a)[aSeq]="Seq"
colnames(a)[aDay]="Day"
colnames(a)[aTissue]="Tissue"
print ("Data complaince accomplished")
return(a)
}

###############################################################################

# filters gag epitope sequences above threshold (>247 NT)
thresh<-function(x,y){
junk=which(x$Length<y)
x_thresh=x[-junk,1:length(x)]
if(length(junk)==0) (x_thresh=x)
print(paste("No. of Sequences removed :",length(junk)))
return(x_thresh)
}

###############################################################################

# filters out wild type from escape mutant sequences for the epitope sequence provided
seqFilter<-function(pool,epi){
poolSeq=pool$Seq
pattern=grep(epi,poolSeq,value=FALSE,ignore.case=TRUE)
WT_seq=pool[pattern,1:length(pool)]
EM_seq=pool[-pattern,1:length(pool)]
percentage_WT=round(((length(pattern)/length(poolSeq))*100),digits=3)
percentage_EM=(100-percentage_WT)
print (paste("Total Sequences:",length(poolSeq)))
print (paste("WT: ",percentage_WT,"%[",length(pattern),"]",sep=""))
print (paste("EM: ",percentage_EM,"%[",(length(poolSeq)-length(pattern)),"]",sep=""))
stats=c(paste("WT:",length(pattern)),paste("EM:",(length(poolSeq)-length(pattern))),paste("raw:",length(poolSeq)))
return(list(WT=WT_seq,EM=EM_seq,stats=stats,raw=pool))
}

###############################################################################

# tissue sequence filter : filters given specific tissue sequences out from the pool
tissueFilter<-function(pool,tissueName){
poolTissue=pool$Tissue
pattern=which(poolTissue==tissueName)
tissue=pool[pattern,1:length(pool)]
percentage=round(((length(pattern)/length(poolTissue))*100),digits=3)
print (paste("Total",tissueName,"sequences are :",length(pattern)))
print (paste(tissueName,"Percentage in total pool:",percentage))
return(list(tissue=tissue,stats=length(pattern)))
}

###############################################################################

# day filter : filters given specific day sequences out from the pool
dayFilter<-function(pool,day){
poolDay=pool$Day
pattern=which(poolDay==day)
dayData=pool[pattern,1:length(pool)]
percentage=round(((length(pattern)/length(poolDay))*100),digits=3)
print (paste("Total sequences for day",day,"are :",length(pattern)))
print (paste("Day",day,"Percentage in given pool:",percentage))
return(dayData)
}

###############################################################################

# deduces the experiment days
dayCheck=function(pool){
dayFetched=c()
for (i in 1:500){if (length(which(pool$Day==i))>0) {dayFetched=c(dayFetched,i)}}
return (dayFetched)
}
###############################################################################
# tissue detector
tissueCheck=function(pool){
tissues=levels(pool$Tissue)
return(tissues)
}
###############################################################################
# animal detector
animalCheck=function(pool){
animals=levels(pool$Animal)
return(animals)
}
############################################################################### 
#Escape rate equation
#for (i in 1:length(D$dayPool)){S[[i]]=Stats(D$dayPool[[2]],escapeRate=TRUE,epi="TCAGAAGGTTGCACCCCCTATGACATTAATCAGATGTTAAATTGT")}

# calculates tissue ammounts in data for WT and EM at respective experiment days
Stats=function(pool,tissue=NULL,days=NULL,animal=NULL,dayBifur=FALSE,animalBifur=FALSE,escapeRate=FALSE,epi=NULL){
	# variable declarations
	poolDay<-c();dayPool<-list();check<-c();TissueDayPool<-list()
	tissueAnimal<-list();dayTissue<-list()
	
	# tissue fetcher
	poolDay=pool$Day
	if(is.null(tissue)){tissue=tissueCheck(pool)}
	# day fetcher
	if(is.null(days)){for (i in 1:250){if (length(which(poolDay==i))>0) {days=c(days,i)}}}
	# animal fetcher
	if(is.null(animal)){animal=animalCheck(pool)}
	
	# Tissue-Animal-Day Stats
	tissueAnimalDay<-list();R1<-c();results1<-c();R2<-c();results2<-c()

	# fetching WT and EM
	if(escapeRate=="TRUE"){
		if (is.null(epi)=="TRUE") {stop("Please provide an epitope sequence to calculate the escape value")}
		else {SF=seqFilter(pool,epi);WT=SF$WT;EM=SF$EM;Tissue=tissueStatsA(tissue,days,WT=SF$WT,EM=SF$EM);results=Tissue$results;TissueA=tissueStatsA(tissue,days,pool)
			for(a in 1:length(TissueA$tissueData)){
				R2[a]=print(paste("Tissue investigated:",tissue[a]))
				if(length(TissueA$tissueData[[a]][[1]])!=0){
					SFa=seqFilter(TissueA$tissueData[[a]],epi)
					aWT=SFa$WT;aEM=SFa$EM
					tissueAnimal[[a]]=aniStatsA(animal,days,WT=aWT,EM=aEM)
				}
				else {(print(paste(tissue[a],"has no data for the pool specified")))}
			}
		}
	}
	else {Tissue=tissueStatsA(tissue,days,pool);results=Tissue$results} 	# Tissues segmentar (for raw pool stats)
		
		# Animal segmentar
		if(animalBifur=="TRUE"){
			for(a in 1:length(Tissue$tissueData)){
				R2[a]=print(paste("Tissue investigated:",tissue[a]))
				tissueAnimal[[a]]=aniStatsA(animal,days,Tissue$tissueData[[a]])
				# Day segmentar
				if(dayBifur=="TRUE"){
					for(b in 1:length(animal)){
						R1[b]=print(paste("Animal investigated:",animal[b]))
							tissueAnimalDay[[b]]=dayStatsA(tissueAnimal[[a]]$animalPool[[b]],days)
					results1=c(results1,paste(R1[b],tissueAnimalDay[[b]]$results))
					}
				results2=c(results2,paste(R2[a],results1))
				}
				else {results2=c(results2,paste(R2[a]))}
			}
		}
		else {results2=results}
	# returning segmented tissue-day specific data for all animals
	return (list(Tissue=Tissue,tissueAnimal=tissueAnimal,tissueAnimalDay=tissueAnimalDay,results=results2))
}
###############################################################################
# brief day stats calculator
dayStatsA=function(pool,days=NULL){
print(paste("Total Sequences:",length(pool[[1]])))
# variable declarations
dayPool<-list();d<-c();statsD<-c();percentageD<-c();resultsD<-c()
poolDay=pool$Day

#day fetcher
if(is.null(days)){for (i in 1:250){if (length(which(poolDay==i))>0) {days=c(days,i)}}}

	for (i in 1:length(days)){
		d=which(poolDay==days[i])
		dayPool[[i]]=pool[d,1:length(pool)]
		statsD[i]=length(dayPool[[i]][[i]])
		percentageD[i]=round(length(d)/length(poolDay)*100,digits=2)
	# replaces NA with 0
	patD=which(sapply(percentageD,is.na),arr.ind=TRUE)
	percentageD[patD]=0
	resultsD=c(resultsD,print(paste(days[i]," - ",statsD[i]," [",percentageD[i],"%]",sep="")))
	}
	return(list(dayPool=dayPool,results=resultsD))
}
###############################################################################
# brief tissue stats calculator
tissueStatsA=function(tissue,days,pool=NULL,WT=NULL,EM=NULL){
# variable declarations
statsT<-c();Stats<-list();Tissue<-c();percentageT<-c();resultsT<-c();StatsT<-list();percentageT<-list();PercentageT<-list();patT<-c()
checkTiss<-c();tissColumn<-c();tissuePool_pattern<-list();tissueDayPool<-list();TissueDayPool<-list();run<-c()

if (is.null(pool)==FALSE){poola<-list();poola[[1]]=pool;run=1;pool<-list();pool[[1]]=poola[[1]];pool[[2]]=NA}
# fetching WT and EM data
if (is.null(WT)==FALSE&&is.null(EM)==FALSE){pool<-list();pool[[1]]=WT;pool[[2]]=EM;run=2} 

for (r in 1:run){
	if((r==1)&&is.na(pool[[2]])==FALSE) {seq="WT"} else {seq="EM"}
	print(paste("Stats for ",length(tissue)," tissue[",seq,"]",sep=""))
	for (k in 1:length(tissue)){
			# tissue column detector
			for (i in 1:length(pool[[r]])){
				checkTiss[i]=length(which(pool[[r]][[i]]==tissue[k]))
				if (checkTiss[i]>=1) {tissColumn[k]=i}
			}
			# outputs empty Tissue day column, if empty
			if (is.null(tissColumn[k])==TRUE){print(paste("No",tissue[k],"for Day",days[k]));statsT[k]=0} else{		
				tissuePool_pattern[[k]]=which(pool[[r]][[tissColumn[k]]]==tissue[k])
				tissueDayPool[[k]]=pool[[r]][tissuePool_pattern[[k]],1:length(pool[[r]])]
				statsT[k]=length(tissueDayPool[[k]][[tissColumn[k]]])
				percentageT[k]=round(((length(tissuePool_pattern[[k]])/length(pool[[r]][[tissColumn[k]]]))*100),digits=2)
				# replaces NA with 0
				patT=which(sapply(percentageT,is.na),arr.ind=TRUE)
				percentageT[patT]=0
			}
			Stats[[r]]=statsT
			
			# printing results
			resultsT=c(resultsT,print(paste(tissue[k]," - ",statsT[k]," [",percentageT[k],"%]",sep="")))
		}
		if((r==2)&&is.na(pool[[2]])==FALSE) {
		print("Escape Values")
		for (k in 1:length(tissue)){escape=Stats[[2]]/(Stats[[1]]+Stats[[2]]);print(paste(tissue[k],"escape :",round((escape[k]*100),digits=2),"%"))}
		}
		
	}
return(list(tissueData=tissueDayPool,results=resultsT))
}
###############################################################################

# descriptive tissue stats calculator
tissueStatsB=function(tissue,days,dayPool){
# variable declarations
statsT<-c();Tissue<-c();percentageT<-c();resultsT<-c();StatsT<-list();percentageT<-list();PercentageT<-list();patT<-c()
checkTiss<-c();tissColumn<-c();tissuePool_pattern<-list();tissueDayPool<-list();TissueDayPool<-list()
	print(paste("Stats for",length(tissue),"tissue"))
	for (k in 1:length(tissue)){
		for (j in 1:length(days)){
			# tissue column detector
			for (i in 1:length(dayPool[[j]])){
				checkTiss[i]=length(which(dayPool[[j]][[i]]==tissue[k]))
				if (checkTiss[i]>=1) {tissColumn[j]=i}
			}
			# outputs empty Tissue day column, if empty
			if (is.null(tissColumn[j])) {print(paste("No",tissue,"for Day",days[j]));statsT[j]=0}
			# filters input tissue specific data for the specific dayPool and calculates statsT
			else {		
				tissuePool_pattern[[j]]=which(dayPool[[j]][[tissColumn[j]]]==tissue[k])
				tissueDayPool[[j]]=dayPool[[j]][tissuePool_pattern[[j]],1:length(dayPool[[j]])]
				statsT[j]=length(tissueDayPool[[j]][[i]])
				percentageT[j]=round(((length(tissuePool_pattern[[j]])/length(dayPool[[j]][[tissColumn[j]]]==tissue[k]))*100),digits=2)
				# replaces NA with 0
				patT=which(sapply(percentageT,is.na),arr.ind=TRUE)
				percentageT[patT]=0
			}
			#which(sapply(percentageT,is.na),arr.ind=TRUE)
			TissueDayPool[[k]]=tissueDayPool
			PercentageT[[k]]=percentageT
			StatsT[[k]]=statsT
			# printing results
			resultsT=c(resultsT,print(paste(tissue[k]," ",days[j]," - ",StatsT[[k]][j]," [",PercentageT[[k]][j],"%]",sep="")))
		}
		print(paste("Total sequences :",sum(StatsT[[k]])))
	}
	return(list(dayTissue=TissueDayPool,results=resultsT))
}
###############################################################################
# brief animal stats calculator
aniStatsA=function(animal,days,pool=NULL,WT=NULL,EM=NULL){
# variable declarations
animalPool_pattern<-list();animalPool<-list();checkAni<-c();aniColumn<-c();percentageA<-c();statsA<-c();patA<-c();resultsA<-c();Stats<-list();statsT<-c()

if (is.null(pool)==FALSE){poola<-list();poola[[1]]=pool;run=1;pool<-list();pool[[1]]=poola[[1]];pool[[2]]=NA}
# fetching WT and EM data
if (is.null(WT)==FALSE&&is.null(EM)==FALSE){pool<-list();pool[[1]]=WT;pool[[2]]=EM;run=2} 

for (r in 1:run){
	if((r==1)&&is.na(pool[[2]])==FALSE) {seq="WT"} else {seq="EM"}
	print(paste("Stats for",length(animal),"animal"))
	for (k in 1:length(animal)){
			# tissue column detector
			for (i in 1:length(pool[[r]])){
				checkAni[i]=length(which(pool[[r]][[i]]==animal[k]))
				if (checkAni[i]>=1) {aniColumn[k]=i}
			}
			# outputs empty Tissue day column, if empty
			if (is.null(aniColumn[k])) {print(paste("No",data,"for ",animal[k]));statsA[k]=0}
			# filters input tissue specific data for the specific pool and calculates statsT
			else {		
				animalPool_pattern[[k]]=which(pool[[r]][[aniColumn[k]]]==animal[k])
				animalPool[[k]]=pool[[r]][animalPool_pattern[[k]],1:length(pool[[r]])]
				statsA[k]=length(animalPool[[k]][[aniColumn[k]]])
				percentageA[k]=round(((length(animalPool_pattern[[k]])/length(pool[[r]][[aniColumn[k]]]))*100),digits=2)
				# replaces NA with 0
				patA=which(sapply(percentageA,is.na),arr.ind=TRUE)
				percentageA[patA]=0
			}
			Stats[[r]]=statsA
			# printing results
			resultsA=c(resultsA,print(paste(animal[k]," - ",statsA[k]," [",percentageA[k],"%]",sep="")))
		}
	if((r==2)&&is.na(pool[[2]])==FALSE) {
		print("Escape Values")
		for (k in 1:length(animal)){escape=Stats[[2]]/(Stats[[1]]+Stats[[2]]);print(paste(animal[k],"escape :",round((escape[k]*100),digits=2),"%"))}
		}
	}
	return(list(animalPool=animalPool,results=resultsA))
}
###############################################################################

# animal stats calculator
aniStatsB=function(animal,days,tissuePool){
# variable declarations
animalPool_pattern<-list();animalDayPool<-list();AnimalDayPool<-list();checkAni<-c();aniColumn<-c();percentageA<-c();statsA<-c();StatsA<-list();PercentageA<-list();patA<-c();resultsA<-c()
	dayPool=tissuePool
	print(paste("Stats for",length(animal),"animals"))
	for (k in 1:length(animal)){
	print(paste("Stats for animals:",animal[k]))
		for (j in 1:length(days)){
			# animal column detector
			for (i in 1:length(dayPool[[j]])){
				checkAni[i]=length(which(dayPool[[j]][[i]]==animal[k]))
				if (checkAni[i]>=1) {aniColumn[j]=i}
			}
			# outputs empty Animal day column, if empty
			if (is.null(aniColumn[j])){print(paste("No",animal,"for Day",days[j]));statsA[j]=0;percentageA[j]=0}
			# filters input animal specific data for the specific dayPool and calculates stats
			else{		
				animalPool_pattern[[j]]=which(dayPool[[j]][[aniColumn[j]]]==animal[k])
				animalDayPool[[j]]=dayPool[[j]][animalPool_pattern[[j]],1:length(dayPool[[j]])]
				statsA[j]=length(animalDayPool[[j]][[i]])
				percentageA[j]=round(((length(animalPool_pattern[[j]])/length(dayPool[[j]][[aniColumn[j]]]==animal[k]))*100),digits=2)
				# replaces NA with 0
				patA=which(sapply(percentageA,is.na),arr.ind=TRUE)
				percentageA[patA]=0
			}
			#which(sapply(percentageA,is.na),arr.ind=TRUE)
			AnimalDayPool[[k]]=animalDayPool
			PercentageA[[k]]=percentageA
			StatsA[[k]]=statsA
			# printing results
			resultsA=c(resultsA,print(paste(animal[k]," ",days[j]," - ",StatsA[[k]][j]," [",PercentageA[[k]][j],"%]",sep="")))
		}
		print(paste("Total sequences :",sum(StatsA[[k]])))
	}
	return(list(dayAnimal=AnimalDayPool,results=resultsA))
}
##############################################################################
# day segmentar
dayStats=function(days,pool){
# variable declarations
dayPool<-list();d<-list()
poolDay=pool$Day
	for (i in 1:length(days)){
		d[[i]]=which(poolDay==days[i])
		dayPool[[i]]=pool[d[[i]],1:length(pool)]
	}
	return(dayPool)
}
##############################################################################	

# function for detecting tissue column and producing stats [in ALPHA phase]
tiss<-function(days,dayPool,tissue){
	# tissue column detector
	for (j in 1:length(days)){
		for (i in 1:length(dayPool[[j]])){
			checkTiss[i]=length(which(dayPool[[j]][[i]]==tissue))
			if (checkTiss[i]>=1) {tissColumn[j]=i}
		}
		# outputs empty Tissue day column
		if (is.null(tissColumn[j])) {print(paste("No",tissue,"for Day",days[j]));Stats[j]=0}
		else {		
			# filters input tissue specific data for the specific dayPool and calculates stats
			tissuePool_pattern[[j]]=which(dayPool[[j]][[tissColumn[j]]]==tissue)
			tissueDayPool[[j]]=dayPool[[j]][tissuePool_pattern[[j]],1:length(dayPool[[j]])]
			Stats[j]=length(tissueDayPool[[j]][[i]])
			percentage[j]=round(((length(tissuePool_pattern[[j]])/length(dayPool[[j]][[tissColumn[j]]]==tissue))*100),digits=2)
		}
	}
}
##########################################################################################################################
##########################################################################################################################
##########################################################################################################################
#####################################	IN PROCESS	######################################################################
##########################################################################################################################
##########################################################################################################################
##########################################################################################################################

# mutation filter
mut<-function(poolSeq,epi){
#WT=length(grep(epi,poolSeq,value=FALSE,ignore.case=FALSE))
epiChar=noquote(strsplit(epi,NULL)[[1]])
for (i in 1:4) {
mutChar=gsub('T',base[i],epiChar[1])
epiCh
print(paste(mutChar,epi,sep=""))
}
return(epiSeq)
}
#epiChar=noquote(strsplit(epi,NULL)[[1]])
#epiCharStart=paste('^',epiChar[1],sep="")
#epiChar[1]=epiCharStart
#base=c('A','T','G','C')
#epiMut<-c();epiSeq<-c()
#for (i in 1:4) {
#	for (a in 1:length(epiChar)){
#		epiMut[i]=print(gsub(epiChar[a],base[i],epi))
#		#print(length(grep(epiMut[i],poolSeq,value=FALSE,ignore.case=FALSE)))
#	}
#}

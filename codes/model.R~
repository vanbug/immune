#####
# solving equation
solveRate<-function(pars,times=c(0,7,10,14,28,56,84,168)){
	derivs<-function(t,state,pars){ #returns rate of change
	with(as.list(c(state,pars)),{
		M=1/(g*exp(-(k*t))+1)
		return(list(M))
		})
	}
	state<-c(M=0)
	return(as.data.frame(ode(y=state,times=times,func=derivs,parms=pars)))
}

## 
# parameter list
pars<-list(g=99,k=0.01)
##############################################################

## model fitting
# fetch data
a<-list()
f=list.files('~/Desktop/immune/R/data/',full.names="TRUE")
for (j in 1:4) {
a[[j]]<-readFile(f[j])
par(mfrow=c(3,5))
# Model fitting
for (i in 1:(length(a[[j]])-1)){
if(is.na(a[[j]][i])){print("yo")}
# initial parameter guess
TT<-c(7,10,14,28,56,84,168) # time
kk=0.02	 # escape rate
gg=99	 # initial population ratio
params.init<-c(k=kk,g=gg)

# plot data

plot(TT,a[[j]][,i+1],xlab="Days",ylab=paste(colnames(a[[1]][i+1]),"Escape Rates"),main=f[j])

# analytical solution
model<-function(params,times){
	with(as.list(params),return(1/((g*exp(-(k*times)))+1)))
	}
	
# running model with initial params and plot the results
lines(TT,model(params.init,TT),lwd=2,col="green")

# fitting algorithm
ModelCost<-function(P){
	out<-model(params=P,times=TT)
	print(P)
	return(a[[j]][,i+1]-out) #residuals
}

(Fita<-modFit(f=ModelCost,params.init))
times<-TT
lines(times,model(Fita$par,times),lwd=2,col="Blue")
summary(Fita)
}
savePlot(paste("~/Desktop/",j,".png"))
}
#################################################################
